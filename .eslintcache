[{"D:\\2020\\Proyects\\Personal\\list-countries\\src\\index.tsx":"1","D:\\2020\\Proyects\\Personal\\list-countries\\src\\Router\\index.tsx":"2","D:\\2020\\Proyects\\Personal\\list-countries\\src\\pages\\Countries\\index.tsx":"3","D:\\2020\\Proyects\\Personal\\list-countries\\src\\pages\\Country\\index.tsx":"4","D:\\2020\\Proyects\\Personal\\list-countries\\src\\hooks\\useCountries.tsx":"5","D:\\2020\\Proyects\\Personal\\list-countries\\src\\components\\CountryCard.tsx":"6","D:\\2020\\Proyects\\Personal\\list-countries\\src\\hooks\\useCurrencyOptions.tsx":"7","D:\\2020\\Proyects\\Personal\\list-countries\\src\\hooks\\useLanguageOptions.tsx":"8","D:\\2020\\Proyects\\Personal\\list-countries\\src\\hooks\\useRegionOptions.tsx":"9","D:\\2020\\Proyects\\Personal\\list-countries\\src\\components\\Loader.tsx":"10"},{"size":135,"mtime":1611869498190,"results":"11","hashOfConfig":"12"},{"size":617,"mtime":1611908614431,"results":"13","hashOfConfig":"12"},{"size":4039,"mtime":1611910601652,"results":"14","hashOfConfig":"12"},{"size":2373,"mtime":1611913521479,"results":"15","hashOfConfig":"12"},{"size":1656,"mtime":1611909983556,"results":"16","hashOfConfig":"12"},{"size":1032,"mtime":1611910462119,"results":"17","hashOfConfig":"12"},{"size":737,"mtime":1611901882619,"results":"18","hashOfConfig":"12"},{"size":754,"mtime":1611902131164,"results":"19","hashOfConfig":"12"},{"size":653,"mtime":1611902308290,"results":"20","hashOfConfig":"12"},{"size":1092,"mtime":1611903305850,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1wy1a0o",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"D:\\2020\\Proyects\\Personal\\list-countries\\src\\index.tsx",[],["47","48","49","50","51","52"],"D:\\2020\\Proyects\\Personal\\list-countries\\src\\Router\\index.tsx",[],"D:\\2020\\Proyects\\Personal\\list-countries\\src\\pages\\Countries\\index.tsx",["53"],"import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport CountryCard from '../../components/CountryCard';\nimport Loader from '../../components/Loader';\nimport useCountries from '../../hooks/useCountries';\nimport useCurrencyOptions from '../../hooks/useCurrencyOptions';\nimport useLanguageOptions from '../../hooks/useLanguageOptions';\nimport useRegionOptions from '../../hooks/useRegionOptions';\n\ninterface CountriesProps {\n  path: string,\n}\n\ninterface Country {\n  _id: string,\n  name: string,\n  alpha2Code: string,\n  population: number,\n}\n\nconst selectStyles = {\n  control: (provided: any) => ({\n    ...provided,\n    height: '100%',\n    borderColor: '#D1D5DB',\n    borderRadius: '.375rem',\n  }),\n};\n\nconst Countries: React.FC<CountriesProps> = () => {\n  const [filters, setFilters] = useState({\n    searchText: '',\n    currency: '',\n    language: '',\n    region: '',\n  });\n  const [displayCountries, setDisplayCountries] = useState<Array<Country>>([]);\n\n  const { currencyOptions, currencyOptionsLoading } = useCurrencyOptions();\n  const { languageOptions, languageOptionsLoading } = useLanguageOptions();\n  const { regionOptions, regionOptionsLoading } = useRegionOptions();\n\n  const {\n    countries,\n    countriesByFilter,\n    loading: countriesLoading,\n    searchByFilter,\n  } = useCountries();\n\n  // Set the countries displayed\n  useEffect(() => {\n    if (countriesLoading) return;\n\n    if (filters.searchText === '' && filters.currency === '' && filters.language === '' && filters.region === '') {\n      setDisplayCountries(countries);\n    } else {\n      setDisplayCountries(countriesByFilter);\n    }\n  }, [countries, countriesByFilter, countriesLoading, filters.searchText]);\n\n  // Search by filter\n  useEffect(() => {\n    searchByFilter(filters);\n  }, [filters]);\n\n  return (\n    <div>\n      <div className=\"grid grid-cols-4 sm:grid-cols-5 gap-4 sm:gap-6 mb-4 sm:mb-6\">\n        <input\n          onChange={(e) => setFilters({ ...filters, searchText: e.target.value })}\n          className=\"p-4 border-gray-300 col-span-3 sm:col-span-4 lg:col-span-2 text-base rounded-lg border outline-none focus:ring-1 focus:ring-blue-500\"\n          placeholder=\"Search country\"\n        />\n        <Select\n          options={currencyOptions}\n          isLoading={currencyOptionsLoading}\n          isClearable\n          onChange={(option) => setFilters({ ...filters, currency: option?.value || '' })}\n          placeholder=\"Select a currency\"\n          styles={selectStyles}\n          className=\"w-full hidden lg:block\"\n        />\n        <Select\n          options={languageOptions}\n          isLoading={languageOptionsLoading}\n          isClearable\n          onChange={(option) => setFilters({ ...filters, language: option?.value || '' })}\n          placeholder=\"Select a language\"\n          styles={selectStyles}\n          className=\"w-full hidden lg:block\"\n        />\n        <Select\n          options={regionOptions}\n          isLoading={regionOptionsLoading}\n          isClearable\n          onChange={(option) => setFilters({ ...filters, region: option?.value || '' })}\n          placeholder=\"Select a region\"\n          styles={selectStyles}\n          className=\"w-full hidden lg:block\"\n        />\n        <button\n          className=\"lg:hidden bg-white h-full col-span-1 sm:col-span-1 p-3 rounded-lg border border-gray-300 flex justify-center items-center cursor-pointer hover:bg-gray-100\"\n          type=\"button\"\n        >\n          <span className=\"material-icons\">filter_list</span>\n        </button>\n      </div>\n      {!countriesLoading ? (\n        <div className=\"grid grid-cols-1 gap-4 sm:gap-6\">\n          {displayCountries?.map(({\n            _id, name, alpha2Code, population,\n          }) => (\n            <CountryCard\n              key={_id}\n              alpha2Code={alpha2Code}\n              name={name}\n              link={`/${alpha2Code}`}\n              population={population}\n            />\n          ))}\n        </div>\n      ) : <Loader />}\n    </div>\n  );\n};\n\nexport default Countries;\n","D:\\2020\\Proyects\\Personal\\list-countries\\src\\pages\\Country\\index.tsx",["54"],"import React from 'react';\nimport { Link } from '@reach/router';\nimport { gql, useQuery } from '@apollo/client';\nimport Loader from '../../components/Loader';\n\ninterface DetailCardProps {\n  title: string,\n  value: any,\n}\n\nconst DetailCard: React.FC<DetailCardProps> = ({ title, value }) => {\n  if (value === undefined || value === '') return null;\n\n  return (\n    <div className=\"flex-1 p-5 rounded-lg border border-gray-300\">\n      <span className=\"block text-xl font-semibold mb-1 sm:mb-2\">{title}</span>\n      <span>\n        {value}\n      </span>\n    </div>\n  );\n};\n\ninterface CountryProps {\n  path: string,\n  country?: string,\n}\n\nconst GET_COUNTRY = gql`\n  query Country($country: String!) {\n    Country (alpha2Code:$country) {\n      _id,\n      name,\n      alpha2Code,\n      population,\n      populationDensity,\n      demonym,\n      capital,\n      area,\n      nativeName,\n    }\n  }\n`;\n\nconst CountryDetail: React.FC<CountryProps> = ({ country }) => {\n  const { data, loading } = useQuery(GET_COUNTRY, {\n    variables: {\n      country,\n    },\n  });\n\n  if (loading) return <Loader />;\n\n  if (data?.Country.length === 0) {\n    return (\n      <div className=\"text-center p-10\">\n        <h1 className=\"text-xl sm:text-4xl\">\n          This country does not exist\n        </h1>\n      </div>\n    );\n  }\n\n  const [countryData] = data?.Country;\n  const {\n    alpha2Code, name, population, populationDensity, demonym, capital, area, nativeName,\n  } = countryData;\n\n  return (\n    <div className=\"bg-white rounded-lg p-8 md:mb-5\">\n      <div className=\"flex items-center mb-5\">\n        <div className=\"flex-1\">\n          <h1 className=\"text-2xl md:text-4xl font-bold mb-1\">\n            {name}\n            <span className=\"text-gray-400 font-semibold\">{` (${alpha2Code})`}</span>\n          </h1>\n        </div>\n        <Link to=\"/\">\n          <span className=\"material-icons text-3xl\">close</span>\n        </Link>\n      </div>\n      <div className=\"flex flex-wrap gap-6\">\n        <DetailCard title=\"Demonym\" value={demonym} />\n        <DetailCard title=\"Capital\" value={capital} />\n        <DetailCard title=\"Population\" value={population} />\n        <DetailCard title=\"Density\" value={populationDensity} />\n        <DetailCard title=\"Area\" value={area} />\n        <DetailCard title=\"Native Name\" value={nativeName} />\n      </div>\n    </div>\n  );\n};\n\nexport default CountryDetail;\n","D:\\2020\\Proyects\\Personal\\list-countries\\src\\hooks\\useCountries.tsx",["55"],"import { gql, useQuery } from '@apollo/client';\n\ninterface Country {\n  _id: string,\n  name: string,\n  alpha2Code: string,\n  population: number,\n}\n\ninterface UseCountries {\n  countriesByFilter: Array<Country>,\n  countries: Array<Country>,\n  loading: boolean,\n  searchByFilter: any,\n}\n\ninterface Filter {\n  searchText: string,\n}\n\nconst GET_COUNTRIES = gql`\n  {\n    Country {\n      _id,\n      name,\n      alpha2Code,\n      population,\n    }\n  }\n`;\n\nconst GET_COUNTRIES_BY_FILTER = gql`\n  query Country($currency: String!, $language: String!, $region: String!, $searchText: String!) {\n    Country(filter: {\n      AND: [\n        { currencies: { code_contains: $currency } }\n        { officialLanguages: { iso639_2_contains: $language } }\n        { subregion: { region: { name_contains: $region } } }\n      ]\n      OR: [\n        { alpha2Code_contains: $searchText }\n        { name_contains: $searchText }\n      ]\n    }) {\n      _id,\n      name,\n      alpha2Code,\n      population,\n    }\n  } \n`;\n\nconst useCountries = (): UseCountries => {\n  const { data, loading: loadingCountries } = useQuery(GET_COUNTRIES);\n  const {\n    data: dataByFilter,\n    loading: loadingCountriesByFilter,\n    refetch: refetchDataByFilter,\n  } = useQuery(GET_COUNTRIES_BY_FILTER, {\n    variables: {\n      searchText: '',\n      currency: '',\n      language: '',\n      region: '',\n    },\n  });\n\n  const searchByFilter = (filters: Filter) => {\n    refetchDataByFilter(filters);\n  };\n\n  return {\n    countriesByFilter: dataByFilter?.Country,\n    countries: data?.Country,\n    loading: loadingCountries || loadingCountriesByFilter,\n    searchByFilter,\n  };\n};\n\nexport default useCountries;\n","D:\\2020\\Proyects\\Personal\\list-countries\\src\\components\\CountryCard.tsx",[],"D:\\2020\\Proyects\\Personal\\list-countries\\src\\hooks\\useCurrencyOptions.tsx",[],["56","57","58","59","60","61"],"D:\\2020\\Proyects\\Personal\\list-countries\\src\\hooks\\useLanguageOptions.tsx",[],"D:\\2020\\Proyects\\Personal\\list-countries\\src\\hooks\\useRegionOptions.tsx",[],"D:\\2020\\Proyects\\Personal\\list-countries\\src\\components\\Loader.tsx",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":22,"column":23,"nodeType":"76","messageId":"77","endLine":22,"endColumn":26,"suggestions":"78"},{"ruleId":"74","severity":1,"message":"75","line":8,"column":10,"nodeType":"76","messageId":"77","endLine":8,"endColumn":13,"suggestions":"79"},{"ruleId":"74","severity":1,"message":"75","line":14,"column":19,"nodeType":"76","messageId":"77","endLine":14,"endColumn":22,"suggestions":"80"},{"ruleId":"62","replacedBy":"81"},{"ruleId":"64","replacedBy":"82"},{"ruleId":"66","replacedBy":"83"},{"ruleId":"68","replacedBy":"84"},{"ruleId":"70","replacedBy":"85"},{"ruleId":"72","replacedBy":"86"},"lines-around-directive",["87"],"no-spaced-func",["88"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["89","90"],["91","92"],["93","94"],["87"],["88"],[],[],[],[],"padding-line-between-statements","func-call-spacing",{"messageId":"95","fix":"96","desc":"97"},{"messageId":"98","fix":"99","desc":"100"},{"messageId":"95","fix":"101","desc":"97"},{"messageId":"98","fix":"102","desc":"100"},{"messageId":"95","fix":"103","desc":"97"},{"messageId":"98","fix":"104","desc":"100"},"suggestUnknown",{"range":"105","text":"106"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"105","text":"107"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"108","text":"106"},{"range":"108","text":"107"},{"range":"109","text":"106"},{"range":"109","text":"107"},[623,626],"unknown","never",[214,217],[276,279]]